AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  compcontrol-api

  SAM Template for compcontrol-api

Metadata:
  AWS::ServerlessRepo::Application:
    Name: compcontrol-api
    Description: This is a serverless AWS application that enables remote computer control. It consists of a WebSocket API which clients connect to, and a REST API for sending commands to those clients via the persistent WebSocket connection.
    Author: Tim Sam
    SpdxLicenseId: BSD-3-Clause
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    HomePageUrl: https://github.com/timTam97/compcontrol-api
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/timTam97/compcontrol-api

Parameters:
  TableName:
    Type: String
    Default: 'compcontrol_connections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

  KeyTableName:
    Type: String
    Default: 'compcontrol_keys'
    Description: (Required) The name of the DynamoDB to store API keys after generation. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

Resources:
  ComputerControl:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ComputerControl
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebsocketAuth:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: WebsocketAuth
      ApiId: !Ref ComputerControl
      AuthorizerType: REQUEST
      IdentitySource: [route.request.header.auth]
      AuthorizerUri: 
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthWebsocketFunction.Arn}/invocations
  
  # SendCommand:
  #   Type: AWS::ApiGatewayV2::Api
  #   Properties:
  #     Name: SendCommand
  #     ProtocolType: HTTP

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ComputerControl
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebsocketAuth
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ComputerControl
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
 
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ComputerControl
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ComputerControl
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
 
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref ComputerControl
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref ComputerControl
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      - AttributeName: "associatedKey"
        AttributeType: "S"
      GlobalSecondaryIndexes:
      - IndexName: "keyIndex"
        KeySchema:
        - AttributeName: "associatedKey"
          KeyType: "HASH"
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableName
  KeyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "key"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "key"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref KeyTableName
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: app.handler
      MemorySize: 256
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ComputerControl
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
 
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.handler
      MemorySize: 256
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ComputerControl
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  SendCommandFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendcommand/
      Handler: app.handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          KEY_TABLE_NAME: !Ref KeyTableName
          CONNECTION_BASE_URL: !Join ['', ['https://', !Ref ComputerControl, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/Prod'] ]
          # A bit hacky but gets the job done
          ALLOWED_COMMANDS: '{"command1": "sleep", "command2": "hibernate", "command3": "shutdown","command4": "lock"}'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComputerControl}/*'
      - DynamoDBCrudPolicy:
          TableName: !Ref KeyTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComputerControl}/*'
      Events:
        SendCommand:
          Type: Api
          Properties:
            Path: /send/{command}
            Method: post
            # Auth: 
            #   ApiKeyRequired: True
  SendCommandPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ComputerControl
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendCommandFunction
      Principal: apigateway.amazonaws.com
  
  SendPingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendping/
      Handler: app.handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONNECTION_BASE_URL: !Join ['', ['https://', !Ref ComputerControl, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/Prod'] ]
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComputerControl}/*'
      Events:
        SendPing:
          Properties:
            Description: Basic keep-alive ping for WebSocket
            Enabled: True
            Name: ScheduledPing
            Schedule: rate(1 minute)
          Type: Schedule
  SendPingPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ComputerControl
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendPingFunction
      Principal: apigateway.amazonaws.com

  GenerateKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: generatekey/
      Handler: app.handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: !Ref KeyTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref KeyTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComputerControl}/*'
      Events:
        SendCommand:
          Type: Api
          Properties:
            Path: /getkey
            Method: get
  GenerateKeyPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ComputerControl
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GenerateKeyFunction
      Principal: apigateway.amazonaws.com

  AuthWebsocketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authwebsocket/
      Handler: app.handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: !Ref KeyTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref KeyTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComputerControl}/*'
  AuthWebsocketPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ComputerControl
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthWebsocketFunction
      Principal: apigateway.amazonaws.com

Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref ComputerControl, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
  
  SendCommandURL:
    Description: "The URL to issue commands to currently connected websocket clients"
    Value: !Join [ '', [ 'https://', !Ref ServerlessRestApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]